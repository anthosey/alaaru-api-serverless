# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: alaaru-api-serverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 512
  timeout: 30
  region: us-east-2
  stage: dev
  apiKeys:
    - my-serverless-api-key-could-be-any-string2
  
  environment:
    DB_NAME: 'anthos20_alaaru'
    DB_USER: 'anthos20_sapi'
    DB_PASS: '@nth0s>p@ss'
    DIALECT: 'mysql'
    DB_HOST: '204.93.216.11'

    # DB_NAME: 'alaaru'
    # DB_USER: 'root'
    # DB_PASS: 'Anthos123$'
    # DIALECT: 'mysql'
    # DB_HOST: 'localhost'

plugins:
  - serverless-offline
  - serverless-plugin-additional-stacks
  - serverless-pseudo-parameters

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getStarted:
    handler: handler.getStarted
    events:
      - http:
          path: /
          method: GET
          cors: true
# Start of Items
  getOneItem:
    handler: handler.getOneItem
    events:
      - http:
          path: /getItem/{id}
          method: GET
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-east-2:017133909792:userpool/us-east-2_5suhGe61K
  getAllItems:
    handler: handler.getAllItems
    events:
      - http:
          path: /getItem
          method: GET
          cors: true
          private: true
  
  postOneItem:
    handler: handler.createItem
    events:
      - http:
          path: /createItem
          method: POST
          cors: true

  deleteOneItem:
    handler: handler.deleteItem
    events:
      - http:
          path: /deleteItem
          method: POST
          cors: true

  updateOneItem:
    handler: handler.updateItem
    events:
      - http:
          path: /updateItem
          method: POST
          cors: true
# End of Items

#Start of Services
  getOneService:
    handler: handler.getOneService
    events:
      - http:
          path: /getService/{id}
          method: GET
          cors: true
  
  getAllServices:
    handler: handler.getAllServices
    events:
      - http:
          path: /getService
          method: GET
          cors: true
  
  postOneService:
    handler: handler.createService
    events:
      - http:
          path: /createService
          method: POST
          cors: true

  deleteOneService:
    handler: handler.deleteService
    events:
      - http:
          path: /deleteService
          method: POST
          cors: true

  updateOneService:
    handler: handler.updateService
    events:
      - http:
          path: /updateService
          method: POST
          cors: true
#End of services

#Start of Weight Prices
  getOneWeightPrice:
    handler: handler.getOneWeightPrice
    events:
      - http:
          path: /getWeightPrice/{id}
          method: GET
          cors: true
  
  getAllWeightPrices:
    handler: handler.getAllWeightPrices
    events:
      - http:
          path: /getWeightPrice
          method: GET
          cors: true
  
  postOneWeightPrice:
    handler: handler.createWeightPrice
    events:
      - http:
          path: /createWeightPrice
          method: POST
          cors: true

  deleteOneWeightPrice:
    handler: handler.deleteWeightPrice
    events:
      - http:
          path: /deleteWeightPrice
          method: POST
          cors: true

  updateOneWeightPrice:
    handler: handler.updateWeightPrice
    events:
      - http:
          path: /updateWeightPrice
          method: POST
          cors: true
#End of Weight Prices

# Start of Pickups
  getAllPickups:
    handler: handler.getAllPickups
    events:
      - http:
          path: /getAllPickups
          method: GET
          cors: true

  getPickupByBookingRef:
    handler: handler.getPickupByBookingRef
    events:
      - http:
          path: /getPickupByBookingRef/{br}
          method: GET
          cors: true
  
  getPickupByPickupRef:
    handler: handler.getPickupByPickupRef
    events:
      - http:
          path: /getPickupByPickupRef/{pr}
          method: GET
          cors: true

  getPickupByStatus:
    handler: handler.getPickupByStatus
    events:
      - http:
          path: /getPickupByStatus/{status}
          method: GET
          cors: true

  getPickupByOfficer:
    handler: handler.getPickupByOfficer
    events:
      - http:
          path: /getPickupByOfficer/{officer}
          method: GET
          cors: true

  postOnePickup:
    handler: handler.createPickup
    events:
      - http:
          path: /createPickup
          method: POST
          cors: true

  deletePickupByPickupRef:
    handler: handler.deletePickupByPickupRef
    events:
      - http:
          path: /deletePickupByPickupRef
          method: POST
          cors: true

  updatePickupStatus:
    handler: handler.updatePickupStatus
    events:
      - http:
          path: /updatePickupStatus
          method: POST
          cors: true
#End of Pickup operations

## to add cors to the API GW errors
  GatewayResponseDefault4XX:
            Type: 'AWS::ApiGateway::GatewayResponse'
            Properties:
              ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
                gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
              ResponseType: DEFAULT_4XX
              RestApiId: '1wvdgthgmc'

  GatewayResponseDefault5XX:
            Type: 'AWS::ApiGateway::GatewayResponse'
            Properties:
              ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
                gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
              ResponseType: DEFAULT_5XX
              RestApiId: '1wvdgthgmc'


# Add Additional Stacks
custom:
  additionalStacks:
     permanent:
      Resources:
        S3BucketData:
          Type: AWS::S3::Bucket
          Properties:
            BucketName: ${self:service}-data


        
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
